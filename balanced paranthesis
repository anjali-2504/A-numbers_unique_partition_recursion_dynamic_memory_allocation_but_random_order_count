#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stack
{
    int size;
    char *arr;
    int top;
};

struct stack *createstack(int size)
{
    struct stack *stack;
    stack = (struct stack *)malloc(sizeof(struct stack));
    
    if (!stack)  
        return NULL; 
    stack->size = size;
    stack->top = -1;
    stack->arr = (char*)malloc(size * sizeof(char));
    return stack;
}


int isEmpty(struct stack *stack)
{
    if (stack->top == -1)
        return 1;
    else
        return 0;
}


void pop(struct stack *stack)
{
    if (!isEmpty(stack))
        stack->top--;
}


void push(char value, struct stack *stack)
{
  
        stack->top++;
        stack->arr[stack->top] = value;

}


int matching_pair(char c, char b)
{
    if (c == '}' && b == '{')
        return 1;
    else if (c == ')' && b == '(')
        return 1;
    else if (c == ']' && b == '[')
        return 1;
    else
        return -1;
}


int balanced(char array[], int len)
{
    struct stack *stacks;
    stacks = createstack(len);
    //printf("%d ",stacks->top);
    for (int i = 0; i < len; i++)
    {
        if (array[i] == '{' || array[i] == '(' || array[i] == '[')
        {
            push(array[i], stacks);
        }
        else if (array[i] == '}' || array[i] == ')' || array[i] == ']')
        {
            if (isEmpty(stacks))
                return 0;
            else if (matching_pair(array[i], stacks->arr[stacks->top]) > 0)
                pop(stacks);
            else
                return 0;
        }
    }
    if (isEmpty(stacks))
        return 1;
    else
        return 0;
}

int main()
{
    char xprsn[100];
    scanf("%s", &xprsn);
    int size = strlen(xprsn);
    int res = balanced(xprsn, size);
    if(res==0)
    printf("NO\n");
    else
    printf("YES\n");
}
